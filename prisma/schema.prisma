generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile  Profile?
  schedule Schedule[] @relation("TrainerSchedules")
  booking  Booking[]

  @@map("users")
}

model Profile {
  id     String  @id @default(uuid())
  userId String  @unique
  name   String
  age    Int?
  phone  String?
  gender Gender  @default(Male)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Schedule {
  id            String   @id @default(uuid())
  trainerId     String
  startDateTime DateTime
  endDateTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainer User      @relation("TrainerSchedules", fields: [trainerId], references: [id])
  booking Booking[]

  @@map("schedules")
}

model Booking {
  id         String @id @default(uuid())
  scheduleId String
  userId     String

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([scheduleId, userId])
  @@map("bookings")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TRAINER
  TRAINEE
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  Male
  Female
}
